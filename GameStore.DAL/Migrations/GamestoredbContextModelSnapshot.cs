// <auto-generated />
using System;
using GameStore.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GamestoredbContext))]
    partial class GamestoredbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Models.Activation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("activation", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("developer", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("avatar_path")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("DeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("developer_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("price");

                    b.Property<int?>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("publisher_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("ReleaseOn")
                        .HasColumnType("date")
                        .HasColumnName("release_on");

                    b.Property<string>("VideoUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("video_url")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DeveloperId" }, "developer_id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.HasIndex(new[] { "PublisherId" }, "publisher_id");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genre_id");

                    b.HasKey("GameId", "GenreId")
                        .HasName("Primary_Game_Genre");

                    b.HasIndex("GenreId");

                    b.ToTable("game_genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.GameOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.HasKey("OrderId", "GameId")
                        .HasName("Primary_Game_Order");

                    b.HasIndex("GameId");

                    b.ToTable("game_order", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Key", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("activation_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<int?>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("game_id")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActivationId" }, "activation_id");

                    b.HasIndex(new[] { "GameId" }, "game_id");

                    b.HasIndex(new[] { "Value" }, "value")
                        .IsUnique();

                    b.ToTable("key", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.MinimumSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<string>("Graphics")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("graphics");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memory");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("os");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("platform_id");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("processor");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("storage");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameId" }, "game_id");

                    b.HasIndex(new[] { "PlatformId", "GameId" }, "platform_id_game_id")
                        .IsUnique();

                    b.ToTable("minimum_specification", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("PayOn")
                        .HasColumnType("date")
                        .HasColumnName("pay_on");

                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("platform", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessRole")
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasColumnName("access_role");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessRole" }, "access_role")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(20,2)")
                        .HasColumnName("balance");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mail");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<int?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("GameStore.Domain.Models.Game", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_game_developer_id");

                    b.HasOne("GameStore.Domain.Models.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_game_publisher_id");

                    b.Navigation("Developer");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GameStore.Domain.Models.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_game_genre_game_id");

                    b.HasOne("GameStore.Domain.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_game_genre_genre_id");

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Models.GameOrder", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Game", "Game")
                        .WithMany("GameOrders")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_game_order_game_id");

                    b.HasOne("GameStore.Domain.Models.Order", "Order")
                        .WithMany("GameOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_game_order_order_id");

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Key", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Activation", "Activation")
                        .WithMany("Keys")
                        .HasForeignKey("ActivationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_key_activation_id");

                    b.HasOne("GameStore.Domain.Models.Game", "Game")
                        .WithMany("Keys")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_key_game_id");

                    b.Navigation("Activation");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GameStore.Domain.Models.MinimumSpecification", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Game", "Game")
                        .WithMany("MinimumSpecifications")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_minimum_specification_game_id");

                    b.HasOne("GameStore.Domain.Models.Platform", "Platform")
                        .WithMany("MinimumSpecifications")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_minimum_specification_platform_id");

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Order", b =>
                {
                    b.HasOne("GameStore.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_order_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameStore.Domain.Models.User", b =>
                {
                    b.HasOne("GameStore.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Activation", b =>
                {
                    b.Navigation("Keys");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Developer", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GameOrders");

                    b.Navigation("Keys");

                    b.Navigation("MinimumSpecifications");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Order", b =>
                {
                    b.Navigation("GameOrders");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Platform", b =>
                {
                    b.Navigation("MinimumSpecifications");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Publisher", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameStore.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GameStore.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
